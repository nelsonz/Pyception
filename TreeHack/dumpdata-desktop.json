[{"pk": 1, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'lineno': 40}, 'tags': {'lineno': 44}, 'text': {'lineno': 41}, 'points': {'lineno': 46}, 'user': {'lineno': 39}, 'date_added': {'lineno': 42}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 48}}, 'lineno': 38}, 'SearchItem': {'doc': None, 'variables': {'text': {'lineno': 27}, 'tags': {'lineno': 30}, 'points': {'lineno': 32}, 'user': {'lineno': 26}, 'date_added': {'lineno': 28}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 34}}, 'lineno': 25}, 'UserProfile': {'doc': None, 'variables': {'city': {'lineno': 11}, 'about': {'lineno': 13}, 'pic': {'lineno': 9}, 'name': {'lineno': 8}, 'country': {'lineno': 12}, 'fbID': {'lineno': 7}, 'specialties': {'lineno': 17}, 'user': {'lineno': 6}, 'gender': {'lineno': 15}, 'genders': {'lineno': 14}, 'points': {'lineno': 18}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 21}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField()\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 2, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'lineno': 40}, 'tags': {'lineno': 44}, 'text': {'lineno': 41}, 'points': {'lineno': 46}, 'user': {'lineno': 39}, 'date_added': {'lineno': 42}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 48}}, 'lineno': 38}, 'SearchItem': {'doc': None, 'variables': {'text': {'lineno': 27}, 'tags': {'lineno': 30}, 'points': {'lineno': 32}, 'user': {'lineno': 26}, 'date_added': {'lineno': 28}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 34}}, 'lineno': 25}, 'UserProfile': {'doc': None, 'variables': {'city': {'lineno': 11}, 'about': {'lineno': 13}, 'pic': {'lineno': 9}, 'name': {'lineno': 8}, 'country': {'lineno': 12}, 'fbID': {'lineno': 7}, 'specialties': {'lineno': 17}, 'user': {'lineno': 6}, 'gender': {'lineno': 15}, 'genders': {'lineno': 14}, 'points': {'lineno': 18}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 21}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField()\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 3, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'lineno': 40}, 'tags': {'lineno': 44}, 'text': {'lineno': 41}, 'points': {'lineno': 46}, 'user': {'lineno': 39}, 'date_added': {'lineno': 42}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 48}}, 'lineno': 38}, 'SearchItem': {'doc': None, 'variables': {'text': {'lineno': 27}, 'tags': {'lineno': 30}, 'points': {'lineno': 32}, 'user': {'lineno': 26}, 'date_added': {'lineno': 28}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 34}}, 'lineno': 25}, 'UserProfile': {'doc': None, 'variables': {'city': {'lineno': 11}, 'about': {'lineno': 13}, 'pic': {'lineno': 9}, 'name': {'lineno': 8}, 'country': {'lineno': 12}, 'fbID': {'lineno': 7}, 'specialties': {'lineno': 17}, 'user': {'lineno': 6}, 'gender': {'lineno': 15}, 'genders': {'lineno': 14}, 'points': {'lineno': 18}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 21}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField()\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 4, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'lineno': 40}, 'tags': {'lineno': 44}, 'text': {'lineno': 41}, 'points': {'lineno': 46}, 'user': {'lineno': 39}, 'date_added': {'lineno': 42}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 48}}, 'lineno': 38}, 'SearchItem': {'doc': None, 'variables': {'text': {'lineno': 27}, 'tags': {'lineno': 30}, 'points': {'lineno': 32}, 'user': {'lineno': 26}, 'date_added': {'lineno': 28}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 34}}, 'lineno': 25}, 'UserProfile': {'doc': None, 'variables': {'city': {'lineno': 11}, 'about': {'lineno': 13}, 'pic': {'lineno': 9}, 'name': {'lineno': 8}, 'country': {'lineno': 12}, 'fbID': {'lineno': 7}, 'specialties': {'lineno': 17}, 'user': {'lineno': 6}, 'gender': {'lineno': 15}, 'genders': {'lineno': 14}, 'points': {'lineno': 18}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 21}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField()\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 5, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'lineno': 40}, 'tags': {'lineno': 44}, 'text': {'lineno': 41}, 'points': {'lineno': 46}, 'user': {'lineno': 39}, 'date_added': {'lineno': 42}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 48}}, 'lineno': 38}, 'SearchItem': {'doc': None, 'variables': {'text': {'lineno': 27}, 'tags': {'lineno': 30}, 'points': {'lineno': 32}, 'user': {'lineno': 26}, 'date_added': {'lineno': 28}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 34}}, 'lineno': 25}, 'UserProfile': {'doc': None, 'variables': {'city': {'lineno': 11}, 'about': {'lineno': 13}, 'pic': {'lineno': 9}, 'name': {'lineno': 8}, 'country': {'lineno': 12}, 'fbID': {'lineno': 7}, 'specialties': {'lineno': 17}, 'user': {'lineno': 6}, 'gender': {'lineno': 15}, 'genders': {'lineno': 14}, 'points': {'lineno': 18}}, 'functions': {'__unicode__': {'doc': None, 'lineno': 21}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField()\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField() #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 6, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "HACK(request.POST[\"code\"])"}}, {"pk": 7, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 8, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 9, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 10, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 11, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'foo': {'doc': None, 'lineno': 1}}}", "rawcode": "def foo():\n    return 3"}}, {"pk": 12, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'foo': {'doc': None, 'lineno': 1}}}", "rawcode": "def foo():\n    return 3"}}, {"pk": 13, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'foo': {'doc': None, 'lineno': 1}}}", "rawcode": "def foo():\n    return 3"}}, {"pk": 14, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'foo': {'doc': None, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 15, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ) }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\nif __name__=='__main__':\n    HACK( ''.join( open( sys.argv[ 1 ] ).readlines() ) )\n    printStr( globals )\n"}}, {"pk": 16, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ) }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\nif __name__=='__main__':\n    HACK( ''.join( open( sys.argv[ 1 ] ).readlines() ) )\n    printStr( globals )\n"}}, {"pk": 17, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ) }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\nif __name__=='__main__':\n    HACK( ''.join( open( sys.argv[ 1 ] ).readlines() ) )\n    printStr( globals )\n"}}, {"pk": 18, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 19, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 20, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 21, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 22, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 23, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n"}}, {"pk": 24, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n"}}, {"pk": 25, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {'HackMap': {'doc': None, 'lineno': 12}, 'ClassHack': {'doc': None, 'lineno': 26}, 'aliasVariablize': {'doc': None, 'lineno': 52}, 'TupleVariablize': {'doc': None, 'lineno': 45}, 'IfHack': {'doc': None, 'lineno': 37}, 'ImportFormHack': {'doc': None, 'lineno': 23}, 'FunctionDefHack': {'doc': None, 'lineno': 30}, 'ImportHack': {'doc': None, 'lineno': 19}, 'NameId': {'doc': None, 'lineno': 55}, 'HACK': {'doc': None, 'lineno': 87}, 'ModuleHack': {'doc': None, 'lineno': 16}, 'printStr': {'doc': None, 'lineno': 77}, 'AttributeId': {'doc': None, 'lineno': 58}, 'AssignHack': {'doc': None, 'lineno': 33}, 'Hack': {'doc': None, 'lineno': 6}, 'NameVariablize': {'doc': None, 'lineno': 42}, 'foo': {'doc': None, 'lineno': 1}, 'AttributeVariablize': {'doc': None, 'lineno': 49}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 26, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n"}}, {"pk": 27, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 28, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 29, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 30, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 31, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 32, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 33, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 34, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 35, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 36, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 37, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 38, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 39, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 40, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 41, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 42, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 43, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 44, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 45, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 46, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 47, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 48, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 49, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 50, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 51, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'functions': {'right_child': {'doc': None, 'lineno': 14}, 'left_child': {'doc': None, 'lineno': 17}, 'children': {'doc': 'This returns the children as a list ', 'lineno': 10}, '__init__': {'doc': 'This is the constructor for the Tree ', 'lineno': 4}}, 'lineno': 1}, 'Animal': {'doc': None, 'variables': {}, 'functions': {'talk': {'doc': None, 'lineno': 26}, '__init__': {'doc': None, 'lineno': 23}}, 'lineno': 21}, 'Dog': {'doc': None, 'variables': {}, 'functions': {}, 'lineno': 29}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\nclass Animal:\n    \n    def __init__( self ):\n        self.name = \"animal\"\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    pass\n\n"}}, {"pk": 52, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 53, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 54, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\n"}}, {"pk": 55, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\n"}}, {"pk": 56, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 57, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 58, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\n"}}, {"pk": 59, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 60, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 61, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 62, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\n"}}, {"pk": 63, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": ""}}, {"pk": 64, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 65, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 66, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    Hack( ast.parse( text ), globals )\n    return globals\n\n"}}, {"pk": 67, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 68, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 69, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 70, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 71, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {'Animal': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 4}}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 18}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 1}, 'Dog': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 30}}, 'functions': {}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    class Animal:\n    \n        def __init__( self ):\n            self.name = \"animal\"\n\n        def talk( self ):\n            return \"hi i am an %s\" % self.name\n    \n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.lseft\n\n\n\nclass Dog:\n    pass\n\n"}}, {"pk": 72, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 73, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 74, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 75, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 76, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 77, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 78, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': 'this is the shit ', 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    ''' this is the shit '''"}}, {"pk": 79, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 80, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 81, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 82, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 83, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 46}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 47}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 45}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 48}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 54}}, 'lineno': 44}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 33}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 32}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 31}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 34}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 40}}, 'lineno': 30}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}}, 'lineno': 5}}, 'functions': {}}", "rawcode": "#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 84, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 85, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 86, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 87, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 88, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n"}}, {"pk": 89, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 90, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 91, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n"}}, {"pk": 92, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 93, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 94, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 95, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 96, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 97, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 98, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 99, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 100, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 101, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 102, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 103, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 104, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 105, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 106, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 107, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 108, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 109, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 110, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 111, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n"}}, {"pk": 112, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n\n"}}, {"pk": 113, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 114, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 115, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 116, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n"}}, {"pk": 117, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 118, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 119, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 120, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 121, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'globalVARx': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'classX': {'doc': 'This is a class', 'variables': {'classVarY': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 5}}, 'classes': {}, 'functions': {'classFunctionFoo': {'variables': {}, 'doc': 'This is a class Function', 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 3}}, 'functions': {'globalFunctionBar': {'variables': {}, 'doc': 'This is a global Function', 'functions': {}, 'classes': {}, 'lineno': 10}}}", "rawcode": "globalVARx = 3\n\nclass classX:\n    \"This is a class\"\n    classVarY = 3\n    def classFunctionFoo(self):\n        \"This is a class Function\"\n        pass\n\ndef globalFunctionBar():\n    \"This is a global Function\"\n\n#    def bar(self):\n#        pass\n#\n#class y:\n#    ''' this is another class '''\n#    \n#class w:\n#    ''' this is another class '''\n\n\n"}}, {"pk": 122, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'globalVARx': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'classX': {'doc': 'This is a class', 'variables': {'classVarY': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 5}}, 'classes': {}, 'functions': {'classFunctionFoo': {'variables': {}, 'doc': 'This is a class Function', 'functions': {}, 'classes': {}, 'lineno': 6}}, 'lineno': 3}}, 'functions': {'globalFunctionBar': {'variables': {}, 'doc': 'This is a global Function', 'functions': {}, 'classes': {}, 'lineno': 10}}}", "rawcode": "globalVARx = 3\n\nclass classX:\n    \"This is a class\"\n    classVarY = 3\n    def classFunctionFoo(self):\n        \"This is a class Function\"\n        pass\n\ndef globalFunctionBar():\n    \"This is a global Function\"\n\n#    def bar(self):\n#        pass\n#\n#class y:\n#    ''' this is another class '''\n#    \n#class w:\n#    ''' this is another class '''\n\n\n"}}, {"pk": 123, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n\n"}}, {"pk": 124, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n\n"}}, {"pk": 125, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'TupleVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 45}, 'IfHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 37}, 'ImportFormHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 55}, 'HACK': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 87}, 'ModuleHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 77}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}, 'AssignHack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 33}, 'Hack': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 42}, 'AttributeVariablize': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 49}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    map( lambda node : Hack( node, classScope ), self.body )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n\n"}}, {"pk": 126, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 127, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 128, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 129, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 130, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 131, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 132, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 133, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 134, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 135, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 136, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 137, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 138, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 139, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 140, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 141, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 142, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 143, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 144, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 145, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 146, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 147, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 148, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 149, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 150, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 151, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 152, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 153, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n\n\n\n\n\n"}}, {"pk": 154, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 155, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 156, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 157, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 158, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 159, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 160, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 161, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 162, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n      return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n\t  return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 163, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 164, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 165, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n        \n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n    \n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 166, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 167, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 168, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 31}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 33}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 35}}, 'lineno': 25}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 11}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blan=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 169, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 31}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 33}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 35}}, 'lineno': 25}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 11}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blan=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 170, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 171, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 172, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 173, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n"}}, {"pk": 174, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 175, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'meta': {'doc': None, 'variables': {}, 'classes': {'meta_class': {'doc': None, 'variables': {}, 'classes': {'inner_inner_class': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 3}}, 'functions': {}, 'lineno': 2}}, 'functions': {}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class meta:\n    class meta_class:\n      class inner_inner_class:\n            pass"}}, {"pk": 176, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'meta': {'doc': None, 'variables': {}, 'classes': {'meta_class': {'doc': None, 'variables': {}, 'classes': {'inner_inner_class': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 12}}, 'functions': {}, 'lineno': 11}}, 'functions': {}, 'lineno': 10}}, 'functions': {'car': {'variables': {'f': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'foo': {'variables': {'a': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}, 'b': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}, 'bar': {'variables': {'*d': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'c': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, '**e': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}}", "rawcode": "def foo( a, b ):\n    return 1\n\ndef bar( c, *d, **e ):\n    return 2\n\ndef car( f=\"3\" ):\n    return 3\n\nclass meta:\n    class meta_class:\n        class inner_inner_class:\n            def __init__( self ):\n    \t       pass\n    \t\n\n\n\n\n"}}, {"pk": 177, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 178, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 179, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 180, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 181, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 32}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}, 'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n        \n    def foo():\n        pass\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 182, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 183, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 184, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 185, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 186, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 187, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 188, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 189, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 190, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 191, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 192, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 193, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 194, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 195, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 196, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 197, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 198, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 199, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 200, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 201, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 202, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 203, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 204, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 205, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 206, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 207, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 208, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 209, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 210, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 211, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 212, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 213, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 214, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 215, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 216, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 217, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'AnswerItem': {'doc': None, 'variables': {'searches': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 50}, 'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 54}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 51}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 49}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 58}}, 'lineno': 48}, 'SearchItem': {'doc': None, 'variables': {'tags': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 40}, 'url': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 37}, 'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 36}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 42}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 35}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 38}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 44}}, 'lineno': 34}, 'UserProfile': {'doc': None, 'variables': {'city': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}, 'about': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}, 'pic': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'liked_answer': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, 'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'liked_search': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'country': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}, 'fbID': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'specialties': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'gender': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}, 'user': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'genders': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}, 'date_added': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}, 'points': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'classes': {}, 'functions': {'__unicode__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'lineno': 9}}, 'functions': {}}", "rawcode": "from django.db import models\nfrom django import forms\nfrom taggit.managers import TaggableManager\nfrom django.contrib.auth.models import User\n#from django.forms import ModelForm\n\n# Create your models here.\n\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    fbID = models.IntegerField()\n    name = models.CharField(max_length=500)\n    pic = models.ImageField(upload_to=\"images/\", blank=True, null=True)\n    \n    date_added = models.DateField(auto_now_add=True)\n    city = models.CharField(max_length=30, blank=True, default=\"\")\n    country = models.CharField(max_length=30, blank=True, default=\"\")\n    about = models.TextField(blank=True, default=\"\")\n    genders = (('Male','Male'), ('Female','Female'))\n    gender = models.CharField(max_length=5, choices=genders, blank=True)\n\n    specialties = TaggableManager(blank=True)\n    points = models.IntegerField(default=0)\n    liked_search = models.ManyToManyField(SearchItem, blank=True, null=True)\n    liked_answer = models.ManyToManyField(AnswerItem, blank=True, null=True)\n\n    \n    #friends\n\n    def __unicode__(self):\n        return self.name\n\n\nclass SearchItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    text = models.CharField(max_length=500) #max_length?\n    url = models.URLField(blank=True, max_length=500, default=\"\")\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n\nclass AnswerItem(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    searches = models.ManyToManyField(SearchItem, blank=True, null=True) #can belong to multiple\n    text = models.CharField(max_length=500) #max_length?\n    date_added = models.DateField(auto_now_add=True)\n\n    tags = TaggableManager(blank=True)\n\n    points = models.IntegerField(default=0)\n\n    def __unicode__(self):\n        return self.text\n\n"}}, {"pk": 218, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 219, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 220, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n\n\n\n\n"}}, {"pk": 221, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 222, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 223, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 224, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 225, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 226, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 227, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n\n\n\n\n"}}, {"pk": 228, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 229, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'self.name': ''}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    self.name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    self.name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    self.name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n\n\n\n\n"}}, {"pk": 230, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 231, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 232, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 233, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'k9': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}, 'dog': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}, 'animal': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}, 'dogs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}}, 'classes': {'K9': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class Animal:\n    name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\n\nanimal = Animal()\ndog = Dog()\nk9 = k9()\n\nanimals = [ animal, dog, k9 ]\ndogs = [ dog, k9 ]\n\nfor animal in animals:\n    print animal.talk()\n\nfor dog in dogs:\n    print dog.bark()\n\n\n\n\n\n"}}, {"pk": 234, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 235, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 236, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 237, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 238, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 239, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 240, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 241, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 242, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 243, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 244, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 245, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 246, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'OutterClass': {'doc': None, 'variables': {'outterVar': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'classes': {'MidClass': {'doc': None, 'variables': {}, 'classes': {'InnerClass': {'doc': None, 'variables': {'innerVar': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'classes': {}, 'functions': {'innerFn': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 5}, '*foo': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 5}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 5}}, 'lineno': 3}}, 'functions': {}, 'lineno': 2}}, 'functions': {'__init__': {'variables': {'*args': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class OutterClass:\n    class MidClass:\n        class InnerClass:\n            innerVar = 1\n            def innerFn( self, *foo ):\n                pass\n    outterVar = 2\n    def __init__( self, *args, **kwargs ):\n        pass\n\n\n\n\n\n\n"}}, {"pk": 247, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 248, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 18}}, 'lineno': 15}, 'Dog': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'lineno': 9}, 'Animal': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'lineno': 1}, 'Cat': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 21}}, 'functions': {}}", "rawcode": "class Animal:\n    name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    name = \"dog\"\n\n    def bark( self ):\n      return \"WOff\"\n\nclass K9( Dog ):\n    name = \"Kannine\"\n\n    def bark( self ):\n\t  return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    pass"}}, {"pk": 249, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 250, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'lineno': 16}, 'Dog': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 10}, 'Animal': {'doc': None, 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 2}, 'Cat': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 22}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 25}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 25}}}", "rawcode": "\nclass Animal:\n    name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    name = \"dog\"\n\n    def bark( self ):\n      return \"WOff\"\n\nclass K9( Dog ):\n    name = \"Kannine\"\n\n    def bark( self ):\n    \treturn \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    for animal in animals:\n        print animal.talk()\n\n\n"}}, {"pk": 251, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 252, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 253, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n        pass\n\n    def talk( self ):\n        return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n        return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n        return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n        print animal.talk()\n\n"}}, {"pk": 254, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 255, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 256, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 257, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 258, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 259, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 260, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 261, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 262, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 263, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 264, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n        pass\npass\npass"}}, {"pk": 265, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 266, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 267, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 268, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 269, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 270, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 271, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 272, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 273, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass\n"}}, {"pk": 274, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 275, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 276, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 277, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 278, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 279, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 280, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 281, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass\n\npass"}}, {"pk": 282, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 283, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 284, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 285, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 286, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 287, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 288, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 289, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 290, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 291, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 292, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 293, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 294, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 295, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 296, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 297, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat(  ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 298, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 299, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 300, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 301, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 302, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n\t      print animal.talk()\n\n"}}, {"pk": 303, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 304, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n\n\n\n\n"}}, {"pk": 305, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'baz': {'variables': {'f': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'foo': {'variables': {'a': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}, 'b': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}, 'bar': {'variables': {'*d': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'c': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, '**e': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}}", "rawcode": "def foo( a, b ):\n    return 1\n\ndef bar( c, *d, **e ):\n    return 2\n\ndef baz( f=\"3\" ):\n    return 3\n\n"}}, {"pk": 306, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 27}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 29}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 307, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'baz': {'variables': {'f': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'foo': {'variables': {'a': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}, 'b': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}, 'bar': {'variables': {'*d': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'c': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, '**e': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}}", "rawcode": "def foo( a, b ):\n    return 1\n\ndef bar( c, *d, **e ):\n    return 2\n\ndef baz( f=\"3\" ):\n    return 3\n\n"}}, {"pk": 308, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'Long3': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 43}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 43}}, 'lineno': 40}, 'Long2': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 22}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 22}}, 'lineno': 18}, 'ReallyLong': {'doc': 'I just take up a lot of space to demo something. ', 'variables': {}, 'classes': {}, 'functions': {'__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'lineno': 1}}, 'functions': {}}", "rawcode": "class ReallyLong:\n    \"\"\" I just take up a lot of space to demo something. \"\"\"\n\n\n\n\n\n    def __init__( self ):\n        pass\n\n\n\n\n\n\n\n\nclass Long2:\n\n\n\n    def __init__( self ):\n      pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Long3:\n\n\n    def __init__( self ):\n\t  pass\n\n"}}, {"pk": 309, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n\n\n\n\n"}}, {"pk": 310, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n\n\n\n\n"}}, {"pk": 311, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 312, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 313, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 314, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 315, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 316, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 317, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 318, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 319, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfere"}}, {"pk": 320, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 321, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "dfdfdfereaewrwdfasdfasdf"}}, {"pk": 322, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'hi': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def hi():\n    pass"}}, {"pk": 323, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'hi': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def hi():\n    pass"}}, {"pk": 324, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 325, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": "adsfqwe"}}, {"pk": 326, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 327, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 328, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 329, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 330, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 331, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(backend):\n        print \"hurp durp\"\n    def Michelle(frontend):\n        print \"hello thar!\"\n    def Huan(parsing):\n        print \"herro\"\n    def Hai(rendering):\n        print \"HAI\""}}, {"pk": 332, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 7}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \n# our awesome team!\nclass us():\n    def Nelson(backend):\n        print \"hurp durp\"\n    def Michelle(frontend):\n        print \"hello thar!\"\n    def Huan(parsing):\n        print \"herro\"\n    def Hai(rendering):\n        print \"HAI\""}}, {"pk": 333, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(backend):\n        print \"hurp durp\"\n    def Michelle(frontend):\n        print \"hello thar!\"\n    def Huan(parsing):\n        print \"herro\"\n    def Hai(rendering):\n        print \"HAI\""}}, {"pk": 334, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(backend):\n        print \"hurp durp\"\n    def Michelle(frontend):\n        print \"hello thar!\"\n    def Huan(parsing):\n        print \"herro\"\n    def Hai(rendering):\n        print \"HAI\""}}, {"pk": 335, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 336, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 337, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 338, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 339, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 340, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 341, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 342, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 343, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 344, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 345, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 346, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 347, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 348, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 349, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 350, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 351, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 352, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 353, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 354, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 355, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 356, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 357, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 358, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 359, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 360, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 361, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 362, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 363, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 364, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 365, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 366, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 367, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 368, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 369, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 370, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 371, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 372, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 7}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n\n# our awesome team!\nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 373, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n\nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 374, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 17}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 375, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 11}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 9}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 7}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    def Nelson(self, backend):\n        print \"hurp durp\"\n    def Michelle(self, frontend):\n        print \"hello thar!\"\n    def Huan(self, parsing):\n        print \"herro\"\n    def Hai(self, rendering):\n        print \"HAI\""}}, {"pk": 376, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}, 'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}, 'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}, 'self': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 377, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 378, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 13}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 13}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 11}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 11}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 9}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 9}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 15}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 15}}, 'lineno': 7}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 3}}}", "rawcode": "hackathon = \"WIN\"\n\"\"\"24 hours of epic\"\"\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 379, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 380, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 381, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 382, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 383, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 384, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 385, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 386, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n\n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n\n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n           return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n\n\n"}}, {"pk": 387, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 388, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 389, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 390, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 391, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 392, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 393, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 394, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 395, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 396, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 397, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 398, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 399, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 400, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 401, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 402, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 403, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 404, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 405, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 406, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 407, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 408, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 409, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 410, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 411, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 412, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo():\n    pass"}}, {"pk": 413, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 414, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 415, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'foo': {'doc': None, 'variables': {}, 'classes': {'bar': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 2}}, 'functions': {}, 'lineno': 1}}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 5}}}", "rawcode": "class foo():\n    class bar():\n        pass\n    \ndef foo():\n    pass"}}, {"pk": 416, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 417, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 418, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 419, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'foo': {'doc': None, 'variables': {}, 'classes': {'bar': {'doc': None, 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 2}}, 'functions': {}, 'lineno': 1}}, 'functions': {'foo': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 5}}}", "rawcode": "class foo():\n    class bar():\n        pass\n    \ndef foo():\n    pass"}}, {"pk": 420, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 421, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {'K9': {'doc': 'I AM KANINE, I BITE ThiNGS YO', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 21}}, 'lineno': 17}, 'Dog': {'doc': 'DOG I IS', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'classes': {}, 'functions': {'bark': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 10}, 'Animal': {'doc': 'YOUR UR BASES is I', 'variables': {'name': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}}, 'classes': {}, 'functions': {'talk': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 7}, '__init__': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}, 'Cat': {'doc': 'MEOWWW!! ', 'variables': {}, 'classes': {}, 'functions': {}, 'lineno': 24}}, 'functions': {'talkAnimals': {'variables': {'*animals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, '**kwargs': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}}, 'doc': 'Tell your animals to talk ', 'functions': {}, 'classes': {}, 'lineno': 28}}}", "rawcode": "class Animal:\n    \"\"\"YOUR UR BASES is I\"\"\"\n    name = \"animal\"\n    def __init__( self ):\n              pass\n        \n    def talk( self ):\n              return \"hi i am an %s\" % self.name\n\nclass Dog( Animal ):\n    \"\"\"DOG I IS\"\"\"\n    name = \"dog\"\n    \n    def bark( self ):\n             return \"WOff\"\n\nclass K9( Dog ):\n    \"\"\"I AM KANINE, I BITE ThiNGS YO\"\"\"\n    name = \"Kannine\"\n\n    def bark( self ):\n               return \"GrrRR WOFF!\"\n\nclass Cat( Animal ):\n    \"\"\" MEOWWW!! \"\"\"\n    pass\n\ndef talkAnimals( *animals, **kwargs ):\n    \"\"\" Tell your animals to talk \"\"\"\n    for animal in animals:\n              print animal.talk()\n"}}, {"pk": 422, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {'foo': {'variables': {'a': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}, 'b': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 1}}}", "rawcode": "def foo(a, b):\n    pass\n\n"}}, {"pk": 423, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 424, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 425, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 426, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 427, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 428, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 429, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 430, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 431, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 432, "model": "treehack.code", "fields": {"serialcode": "{'variables': {}, 'classes': {}, 'functions': {}}", "rawcode": ""}}, {"pk": 433, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 434, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 435, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 24}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 13}, 'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 16}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}, {"pk": 436, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'ast.Attribute.Id': '', 'ast.alias.Variablize': '', 'ast.Attribute.Variablize': '', 'ast.Expr.Hack': '', 'ast.AugAssign.Hack': '', 'globals': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 3}, 'ast.Import.Hack': '', 'ast.If.Hack': '', 'ast.Name.Variablize': '', 'ast.FunctionDef.Hack': '', 'ast.ClassDef.Hack': '', 'ast.Raise.Hack': '', 'ast': '', 'sys': '', 'ast.Pass.Hack': '', 'ast.Tuple.Variablize': '', 'ast.Module.Hack': '', 'ast.Assign.Hack': '', 'ast.Print.Hack': '', 'ast.Delete.Hack': '', 'ast.Assert.Hack': '', 'ast.Name.Id': ''}, 'classes': {}, 'functions': {'HackMap': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}, 'nodes': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 12}, 'ClassHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 26}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 26}, 'aliasVariablize': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 59}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 59}, 'TupleVariablize': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 52}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 52}, 'IfHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 43}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 43}, 'ImportFormHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 23}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 23}, 'FunctionDefHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 30}, 'ImportHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 19}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 19}, 'NameId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 62}, 'HACK': {'variables': {'text': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 94}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 94}, 'ModuleHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 16}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 16}, 'printStr': {'variables': {'indent': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 84}, 'd': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 84}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 84}, 'AttributeId': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 65}, 'AssignHack': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 39}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 39}, 'Hack': {'variables': {'node': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}, 'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 6}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 6}, 'NameVariablize': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 48}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 48}, 'AttributeVariablize': {'variables': {'scope': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 56}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 56}}}", "rawcode": "import ast, sys\n\nglobals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n\n# BUILDS UP THE REPRESENATION OF THE TREE\ndef Hack( node, scope ):\n    if hasattr( node, \"Hack\" ):\n        node.Hack( scope )\n    else:\n        print \"AHH NODE\", node, \"Doesnt have HACK METHOD\"\n\ndef HackMap( nodes, scope ):\n    for node in nodes:\n        Hack( node, scope )\n\ndef ModuleHack( self, scope ):\n    HackMap( self.body, scope )\n\ndef ImportHack( self, scope ):\n    for name in self.names:\n        name.Variablize( scope )\n\ndef ImportFormHack( self, scope ):\n    pass # NOT SURE WHAT TO DO..\n    \ndef ClassHack( self, scope ):\n    classScope = scope[ \"classes\" ][ self.name ] = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {}, \"lineno\" : self.lineno, \"doc\" : ast.get_docstring( self ) }\n    HackMap( self.body, classScope )\n\ndef FunctionDefHack( self, scope ):\n    newScope = scope[\"functions\"][ self.name ] = { \"lineno\": self.lineno, \"doc\" : ast.get_docstring( self ), \"classes\" : {}, \"functions\" : {}, \"variables\": {} }\n    for arg in self.args.args:\n        arg.Variablize( newScope )\n    if self.args.vararg:\n        newScope[ \"variables\" ][ \"*\" + self.args.vararg ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n    if self.args.kwarg:\n        newScope[ \"variables\" ][ \"**\" + self.args.kwarg ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef AssignHack( self, scope ):\n    for target in self.targets:\n        target.Variablize( scope )\n\ndef IfHack( self, scope ):\n    HackMap( self.body, scope )\n    HackMap( self.orelse, scope )\n\n# VARIABLIZES\ndef NameVariablize( self, scope ):\n    if self.id != \"self\":\n        scope[ \"variables\" ][ self.id ] = { \"lineno\": self.lineno, \"classes\" : {}, \"functions\" : {}, \"variables\" : {} }\n\ndef TupleVariablize( self, scope ):\n    for name in self.elts:\n        name.Variablize( scope )\n\ndef AttributeVariablize( self, scope ):\n    scope[ \"variables\" ][ self.Id() ] = \"\"\n\ndef aliasVariablize( self, scope ):\n    scope[ \"variables\" ][ self.name ] = self.asname if self.asname else \"\"\n\ndef NameId( self ):\n    return self.id\n\ndef AttributeId( self ):\n    return self.value.Id() + \".\" + self.attr\n\nast.Name.Id = NameId\nast.Attribute.Id = AttributeId\n\nast.Name.Variablize = NameVariablize\nast.Tuple.Variablize = TupleVariablize\nast.Attribute.Variablize = AttributeVariablize\nast.alias.Variablize = aliasVariablize\n\nast.Module.Hack = ModuleHack\nast.Import.Hack = ImportHack\nast.FunctionDef.Hack = FunctionDefHack\nast.ClassDef.Hack = ClassHack\nast.Assign.Hack = AssignHack\nast.If.Hack = IfHack\nast.Pass.Hack = ast.Assert.Hack = ast.Raise.Hack = ast.Print.Hack = ast.AugAssign.Hack = ast.Delete.Hack = ast.Expr.Hack = lambda self, scope: None\n\ndef printStr( d, indent=0 ):\n    if type( d ) != dict:\n        print \"%s%s\" % ( ' ' * indent * 5 , d )\n    else:\n        for key, val in d.items():\n            print \"%s{ %s : \" % ( ' ' * indent * 5 , key )\n            printStr( val, indent + 1)\n            print \"%s}\" % ( ' ' * indent * 5 )\n\n\ndef HACK( text ):\n    global globals\n    Hack( ast.parse( text ), globals )\n    ret = globals\n    globals = { \"classes\" : {}, \"variables\" : {}, \"functions\" : {} }\n    return ret\n\n\nif __name__ == '__main__':\n    if len( sys.argv ) > 1:\n        printStr( HACK( ast.parse( \"\\n\".join( open( sys.argv[-1] ).readlines() ) ) ) )\n\n"}}, {"pk": 437, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'hackathon': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 1}}, 'classes': {'us': {'doc': 'our awesome team!', 'variables': {}, 'classes': {}, 'functions': {'Huan': {'variables': {'parsing': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 12}}, 'doc': 'herro', 'functions': {}, 'classes': {}, 'lineno': 12}, 'Michelle': {'variables': {'frontend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 10}}, 'doc': 'hello thar!', 'functions': {}, 'classes': {}, 'lineno': 10}, 'Nelson': {'variables': {'backend': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 8}}, 'doc': 'hurp durp', 'functions': {}, 'classes': {}, 'lineno': 8}, 'Hai': {'variables': {'rendering': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 14}}, 'doc': 'HAI', 'functions': {}, 'classes': {}, 'lineno': 14}}, 'lineno': 6}}, 'functions': {'team': {'variables': {'project': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}, 'members': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 2}}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 2}}}", "rawcode": "hackathon = \"WIN\"\ndef team(members, project):\n    self.members = 4\n    self.project = \"pyception\"\n    \nclass us():\n    \"\"\"our awesome team!\"\"\"\n    def Nelson(self, backend):\n        \"\"\"hurp durp\"\"\"\n    def Michelle(self, frontend):\n        \"\"\"hello thar!\"\"\"\n    def Huan(self, parsing):\n        \"\"\"herro\"\"\"\n    def Hai(self, rendering):\n        \"\"\"HAI\"\"\""}}, {"pk": 438, "model": "treehack.code", "fields": {"serialcode": "{'variables': {'B': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 28}, 'Tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 30}}, 'classes': {'BinaryTree': {'doc': 'This is a tree it is cool you know... ', 'variables': {}, 'classes': {}, 'functions': {'right_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 14}, 'left_child': {'variables': {}, 'doc': None, 'functions': {}, 'classes': {}, 'lineno': 17}, 'children': {'variables': {}, 'doc': 'This returns the children as a list ', 'functions': {}, 'classes': {}, 'lineno': 10}, '__init__': {'variables': {'right': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'datum': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}, 'left': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 4}}, 'doc': 'This is the constructor for the Tree ', 'functions': {}, 'classes': {}, 'lineno': 4}}, 'lineno': 1}}, 'functions': {'Print': {'variables': {'tree': {'variables': {}, 'functions': {}, 'classes': {}, 'lineno': 20}}, 'doc': 'I print treess.. isnt that obvious >.> ', 'functions': {}, 'classes': {}, 'lineno': 20}}}", "rawcode": "class BinaryTree:\n    ''' This is a tree it is cool you know... '''\n\n    def __init__( self, datum, left=None, right=None ):\n        ''' This is the constructor for the Tree '''\n        self.datum = datum\n        self.left = left\n        self.right = right\n\n    def children( self ):\n        ''' This returns the children as a list '''\n        return [ self.left, self.right ]\n\n    def right_child( self ):\n        return self.right\n\n    def left_child( self ):\n        return self.left\n\ndef Print( tree ):\n    \"\"\" I print treess.. isnt that obvious >.> \"\"\"\n    def helper( tree, indent ):\n        print tree.datum\n        helper( tree.left, indent + 1 )\n        helper( tree.right, indent + 1 )\n    helper( tree, 0 )\n\nB = BinaryTree\n\nTree = B( 1, B( 2, B( 3 ), B( 1, B( 4 ) ) ), B( 4 ) )\nPrint( tree )\n"}}]